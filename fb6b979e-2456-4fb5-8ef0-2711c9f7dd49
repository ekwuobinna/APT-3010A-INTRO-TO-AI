{"metadata": {"kernelspec": {"display_name": "anaconda-panel-2023.05-py310", "language": "python", "name": "conda-env-anaconda-panel-2023.05-py310-py"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.11.5"}}, "nbformat_minor": 5, "nbformat": 4, "cells": [{"id": "6c34d384-d89b-44b3-b5f0-b6c9ba55c451", "cell_type": "code", "source": "from sklearn.datasets import load_digits", "metadata": {"trusted": true}, "outputs": [], "execution_count": 1}, {"id": "3733ba58-8d9b-4eb6-81ec-e64dbe5c04ca", "cell_type": "code", "source": "digits =load_digits()", "metadata": {"trusted": true}, "outputs": [], "execution_count": 2}, {"id": "5c40bded-a419-44ee-ba01-8244c5b4c39f", "cell_type": "code", "source": "type (digits)", "metadata": {"trusted": true}, "outputs": [{"execution_count": 3, "output_type": "execute_result", "data": {"text/plain": "sklearn.utils._bunch.Bunch"}, "metadata": {}}], "execution_count": 3}, {"id": "655b89b1-e60a-4c28-ad87-9d75672583a9", "cell_type": "code", "source": "print (digits.DESCR)", "metadata": {"trusted": true}, "outputs": [{"name": "stdout", "text": ".. _digits_dataset:\n\nOptical recognition of handwritten digits dataset\n--------------------------------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 1797\n    :Number of Attributes: 64\n    :Attribute Information: 8x8 image of integer pixels in the range 0..16.\n    :Missing Attribute Values: None\n    :Creator: E. Alpaydin (alpaydin '@' boun.edu.tr)\n    :Date: July; 1998\n\nThis is a copy of the test set of the UCI ML hand-written digits datasets\nhttps://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits\n\nThe data set contains images of hand-written digits: 10 classes where\neach class refers to a digit.\n\nPreprocessing programs made available by NIST were used to extract\nnormalized bitmaps of handwritten digits from a preprinted form. From a\ntotal of 43 people, 30 contributed to the training set and different 13\nto the test set. 32x32 bitmaps are divided into nonoverlapping blocks of\n4x4 and the number of on pixels are counted in each block. This generates\nan input matrix of 8x8 where each element is an integer in the range\n0..16. This reduces dimensionality and gives invariance to small\ndistortions.\n\nFor info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G.\nT. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C.\nL. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469,\n1994.\n\n.. topic:: References\n\n  - C. Kaynak (1995) Methods of Combining Multiple Classifiers and Their\n    Applications to Handwritten Digit Recognition, MSc Thesis, Institute of\n    Graduate Studies in Science and Engineering, Bogazici University.\n  - E. Alpaydin, C. Kaynak (1998) Cascading Classifiers, Kybernetika.\n  - Ken Tang and Ponnuthurai N. Suganthan and Xi Yao and A. Kai Qin.\n    Linear dimensionalityreduction using relevance weighted LDA. School of\n    Electrical and Electronic Engineering Nanyang Technological University.\n    2005.\n  - Claudio Gentile. A New Approximate Maximal Margin Classification\n    Algorithm. NIPS. 2000.\n\n", "output_type": "stream"}], "execution_count": 4}, {"id": "9b2a8ef9-fd15-41d5-bd88-00388274e51e", "cell_type": "code", "source": "digits.target [4]", "metadata": {"trusted": true}, "outputs": [{"execution_count": 5, "output_type": "execute_result", "data": {"text/plain": "4"}, "metadata": {}}], "execution_count": 5}, {"id": "b0bd6308-1d52-4002-8f95-61d1b43190c3", "cell_type": "code", "source": "digits.target [::4]", "metadata": {"trusted": true}, "outputs": [{"execution_count": 6, "output_type": "execute_result", "data": {"text/plain": "array([0, 4, 8, 2, 6, 0, 4, 8, 5, 0, 8, 7, 0, 7, 1, 3, 4, 4, 0, 8, 1, 2,\n       6, 9, 8, 4, 6, 7, 7, 2, 5, 4, 9, 2, 6, 0, 4, 8, 2, 6, 0, 6, 8, 1,\n       5, 2, 2, 6, 3, 6, 1, 5, 0, 6, 7, 9, 8, 4, 6, 7, 7, 2, 8, 0, 0, 4,\n       8, 2, 6, 0, 4, 8, 5, 0, 8, 7, 0, 7, 1, 3, 4, 4, 0, 8, 1, 2, 6, 9,\n       8, 4, 6, 7, 7, 2, 5, 4, 9, 2, 6, 0, 4, 8, 2, 6, 0, 6, 8, 1, 5, 2,\n       2, 6, 3, 6, 1, 5, 0, 6, 7, 1, 7, 3, 5, 6, 4, 8, 7, 8, 0, 0, 4, 8,\n       2, 6, 0, 4, 8, 5, 0, 8, 7, 0, 7, 1, 3, 4, 4, 0, 8, 1, 2, 6, 9, 8,\n       4, 6, 7, 7, 2, 5, 4, 9, 2, 6, 0, 4, 8, 2, 6, 0, 6, 8, 1, 5, 2, 2,\n       6, 3, 6, 1, 5, 0, 6, 7, 1, 7, 3, 5, 6, 4, 8, 7, 8, 0, 0, 4, 8, 2,\n       6, 0, 4, 8, 5, 0, 8, 7, 0, 7, 1, 3, 4, 4, 0, 8, 1, 2, 6, 9, 8, 4,\n       6, 7, 7, 2, 5, 4, 9, 3, 7, 1, 5, 9, 3, 7, 9, 5, 9, 7, 1, 2, 6, 3,\n       6, 1, 5, 0, 6, 4, 3, 6, 1, 3, 1, 4, 2, 9, 9, 8, 3, 7, 1, 5, 9, 3,\n       7, 9, 5, 9, 7, 1, 8, 2, 7, 6, 9, 9, 2, 7, 1, 3, 1, 4, 0, 9, 5, 2,\n       5, 4, 9, 8, 3, 7, 1, 5, 9, 3, 7, 9, 5, 9, 7, 1, 2, 0, 3, 3, 6, 5,\n       2, 0, 3, 4, 3, 6, 1, 3, 1, 4, 2, 9, 8, 8, 1, 5, 9, 3, 7, 1, 5, 9,\n       5, 9, 4, 3, 0, 8, 2, 7, 6, 9, 9, 2, 7, 1, 3, 1, 4, 0, 9, 5, 2, 5,\n       4, 9, 1, 5, 9, 3, 7, 1, 5, 9, 5, 9, 4, 3, 0, 8, 2, 7, 6, 9, 9, 2,\n       7, 1, 3, 1, 4, 0, 9, 5, 2, 5, 4, 9, 8, 3, 7, 1, 5, 1, 5, 9, 5, 9,\n       4, 3, 0, 8, 2, 7, 6, 9, 9, 0, 3, 4, 3, 6, 1, 3, 1, 4, 5, 4, 8, 1,\n       5, 9, 3, 7, 1, 5, 9, 5, 9, 4, 3, 0, 8, 2, 7, 6, 9, 9, 2, 7, 1, 3,\n       1, 4, 0, 9, 5, 2, 5, 4, 9, 8])"}, "metadata": {}}], "execution_count": 6}, {"id": "14fdfd40-fff0-4268-8101-88bea5c691db", "cell_type": "code", "source": "digits.target [0]", "metadata": {"trusted": true}, "outputs": [{"execution_count": 7, "output_type": "execute_result", "data": {"text/plain": "0"}, "metadata": {}}], "execution_count": 7}, {"id": "7e831664-4317-4b1c-b517-dc2ccf3846ce", "cell_type": "code", "source": "digits.images [0]", "metadata": {"trusted": true}, "outputs": [{"execution_count": 8, "output_type": "execute_result", "data": {"text/plain": "array([[ 0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],\n       [ 0.,  0., 13., 15., 10., 15.,  5.,  0.],\n       [ 0.,  3., 15.,  2.,  0., 11.,  8.,  0.],\n       [ 0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],\n       [ 0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],\n       [ 0.,  4., 11.,  0.,  1., 12.,  7.,  0.],\n       [ 0.,  2., 14.,  5., 10., 12.,  0.,  0.],\n       [ 0.,  0.,  6., 13., 10.,  0.,  0.,  0.]])"}, "metadata": {}}], "execution_count": 8}, {"id": "b95fbb95-7086-47fb-a1c7-8e1d530b590b", "cell_type": "code", "source": "digits.images[9]", "metadata": {"trusted": true}, "outputs": [{"execution_count": 17, "output_type": "execute_result", "data": {"text/plain": "array([[ 0.,  0., 11., 12.,  0.,  0.,  0.,  0.],\n       [ 0.,  2., 16., 16., 16., 13.,  0.,  0.],\n       [ 0.,  3., 16., 12., 10., 14.,  0.,  0.],\n       [ 0.,  1., 16.,  1., 12., 15.,  0.,  0.],\n       [ 0.,  0., 13., 16.,  9., 15.,  2.,  0.],\n       [ 0.,  0.,  0.,  3.,  0.,  9., 11.,  0.],\n       [ 0.,  0.,  0.,  0.,  9., 15.,  4.,  0.],\n       [ 0.,  0.,  9., 12., 13.,  3.,  0.,  0.]])"}, "metadata": {}}], "execution_count": 17}, {"id": "a9759ef2-e9d6-4fd2-9f41-f9a1b98a66f1", "cell_type": "code", "source": "digits.data.shape", "metadata": {"trusted": true}, "outputs": [{"execution_count": 18, "output_type": "execute_result", "data": {"text/plain": "(1797, 64)"}, "metadata": {}}], "execution_count": 18}, {"id": "4cdf6d1f-4e86-4f5a-ab36-12b4f61ae17c", "cell_type": "code", "source": "import matplotlib.pyplot as plt", "metadata": {"trusted": true}, "outputs": [], "execution_count": 19}, {"id": "46b659d3-6a7d-4e2c-a134-d49c1bfb53f0", "cell_type": "code", "source": "figure, axes =plt.subplots(nrows=4, ncols=6, figsize=(6,4))\n\nfor item in zip (axes.ravel(), digits.images, digits.target):\n    axes, image, target = item\n    axes.imshow(image, cmap=plt.cm.gray_r)\n    axes.set_xticks([])\n    axes.set_yticks([])\n    axes.set_title(target)\nplt.tight_layout()", "metadata": {"trusted": true}, "outputs": [{"output_type": "display_data", "data": {"text/plain": "<Figure size 600x400 with 24 Axes>", "image/png": ""}, "metadata": {}}], "execution_count": 20}, {"id": "c9d6579c-c4b3-477e-888c-68e6cd27f667", "cell_type": "code", "source": "from sklearn.model_selection import train_test_split", "metadata": {"trusted": true}, "outputs": [], "execution_count": 21}, {"id": "32e2718c-c815-4cea-874b-993e023385cc", "cell_type": "code", "source": "X_train, X_test, y_train, y_test=train_test_split(digits.data, digits.target, random_state=11)", "metadata": {"trusted": true}, "outputs": [], "execution_count": 22}, {"id": "80d9a4fe-c3bd-483b-91f1-dc2348cc7cb7", "cell_type": "code", "source": "digits.data.shape", "metadata": {"trusted": true}, "outputs": [{"execution_count": 23, "output_type": "execute_result", "data": {"text/plain": "(1797, 64)"}, "metadata": {}}], "execution_count": 23}, {"id": "76d59ab2-8505-4fcb-8d53-10351d63b8ed", "cell_type": "code", "source": "X_train.shape", "metadata": {"trusted": true}, "outputs": [{"execution_count": 24, "output_type": "execute_result", "data": {"text/plain": "(1347, 64)"}, "metadata": {}}], "execution_count": 24}, {"id": "8a291a04-01ea-4421-bbb1-6e998e7ecc7a", "cell_type": "code", "source": "y_train.shape", "metadata": {"trusted": true}, "outputs": [{"execution_count": 25, "output_type": "execute_result", "data": {"text/plain": "(1347,)"}, "metadata": {}}], "execution_count": 25}, {"id": "98c78619-f738-4f0a-88e3-c16c70400b5e", "cell_type": "code", "source": "X_test.shape", "metadata": {"trusted": true}, "outputs": [{"execution_count": 26, "output_type": "execute_result", "data": {"text/plain": "(450, 64)"}, "metadata": {}}], "execution_count": 26}, {"id": "522d5e60-790c-4c32-98b3-1554e41ac4f5", "cell_type": "code", "source": "1347/1797*100", "metadata": {"trusted": true}, "outputs": [{"execution_count": 27, "output_type": "execute_result", "data": {"text/plain": "74.95826377295492"}, "metadata": {}}], "execution_count": 27}, {"id": "89456f11-2966-4602-b684-3d3ffeb31ae9", "cell_type": "code", "source": "from sklearn.neighbors import KNeighborsClassifier", "metadata": {"trusted": true}, "outputs": [], "execution_count": 28}, {"id": "24a3762d-c222-4208-b940-f4754dedd727", "cell_type": "code", "source": "knn=KNeighborsClassifier()", "metadata": {"trusted": true}, "outputs": [], "execution_count": 29}, {"id": "0df22474-051d-4a55-895d-d5b93c8d13d3", "cell_type": "code", "source": "knn.fit(X=X_train, y=y_train)", "metadata": {"trusted": true}, "outputs": [{"execution_count": 30, "output_type": "execute_result", "data": {"text/plain": "KNeighborsClassifier()", "text/html": "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"\u25b8\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"\u25be\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"}, "metadata": {}}], "execution_count": 30}, {"id": "26e953e6-8bbd-4e24-985d-fcf89213d60c", "cell_type": "code", "source": "predicated = knn.predict(X=X_test)", "metadata": {"trusted": true}, "outputs": [], "execution_count": 32}, {"id": "035b968f-bffb-465d-aaab-b1092b9e796a", "cell_type": "code", "source": "expected = y_test", "metadata": {"trusted": true}, "outputs": [], "execution_count": 33}, {"id": "858d7314-ebaf-4f22-8b82-7856337a574f", "cell_type": "code", "source": "expected", "metadata": {"trusted": true}, "outputs": [{"execution_count": 34, "output_type": "execute_result", "data": {"text/plain": "array([0, 4, 9, 9, 3, 1, 4, 1, 5, 0, 4, 9, 4, 1, 5, 3, 3, 8, 3, 6, 9, 6,\n       0, 6, 9, 3, 2, 1, 8, 1, 7, 0, 4, 4, 1, 5, 3, 0, 5, 7, 3, 9, 6, 5,\n       5, 8, 8, 1, 1, 2, 4, 9, 5, 6, 9, 2, 1, 8, 5, 3, 2, 7, 9, 6, 3, 7,\n       4, 2, 0, 1, 0, 2, 7, 3, 5, 1, 8, 7, 7, 2, 0, 6, 6, 4, 6, 8, 3, 7,\n       4, 1, 9, 3, 5, 4, 0, 3, 1, 3, 3, 1, 2, 8, 5, 0, 1, 7, 2, 1, 3, 3,\n       7, 4, 0, 2, 9, 0, 4, 2, 5, 6, 1, 2, 6, 1, 8, 6, 0, 2, 6, 2, 6, 1,\n       9, 4, 8, 0, 4, 0, 2, 3, 4, 4, 1, 7, 9, 7, 2, 0, 3, 7, 8, 8, 3, 5,\n       4, 3, 5, 4, 9, 1, 3, 8, 8, 1, 1, 6, 7, 3, 3, 9, 9, 0, 6, 1, 0, 1,\n       0, 7, 6, 1, 5, 9, 0, 2, 2, 8, 6, 8, 3, 2, 9, 2, 9, 3, 0, 1, 2, 7,\n       4, 9, 9, 4, 9, 3, 2, 7, 2, 6, 9, 8, 0, 2, 6, 3, 4, 2, 7, 6, 6, 7,\n       7, 6, 0, 7, 6, 6, 0, 7, 1, 4, 4, 1, 0, 9, 4, 0, 4, 2, 4, 6, 5, 3,\n       8, 4, 1, 3, 9, 8, 3, 8, 9, 4, 2, 0, 4, 9, 2, 3, 5, 0, 8, 2, 5, 4,\n       7, 5, 5, 1, 0, 2, 9, 0, 7, 7, 6, 2, 1, 5, 4, 1, 0, 5, 1, 6, 5, 4,\n       8, 7, 5, 9, 0, 2, 2, 3, 4, 4, 8, 8, 8, 5, 3, 0, 7, 0, 3, 0, 7, 9,\n       8, 8, 3, 3, 9, 8, 2, 8, 4, 7, 7, 9, 1, 3, 5, 8, 8, 2, 2, 9, 4, 6,\n       8, 0, 6, 1, 2, 7, 8, 8, 9, 7, 9, 0, 3, 7, 2, 3, 0, 7, 3, 9, 9, 4,\n       2, 1, 7, 4, 4, 5, 7, 4, 7, 4, 4, 5, 2, 4, 2, 0, 6, 3, 6, 4, 2, 7,\n       2, 2, 8, 2, 5, 8, 1, 0, 6, 6, 1, 5, 6, 8, 6, 7, 0, 1, 1, 9, 7, 2,\n       7, 8, 2, 4, 8, 9, 8, 4, 4, 2, 5, 5, 5, 2, 6, 6, 9, 6, 9, 8, 2, 1,\n       2, 3, 8, 7, 5, 9, 6, 6, 0, 0, 4, 7, 7, 7, 8, 2, 5, 5, 5, 8, 4, 6,\n       0, 5, 9, 1, 3, 1, 2, 2, 1, 0])"}, "metadata": {}}], "execution_count": 34}, {"id": "1d29f0f0-86a0-4deb-a5a3-441ca6ca5725", "cell_type": "code", "source": "predicated", "metadata": {"trusted": true}, "outputs": [{"execution_count": 35, "output_type": "execute_result", "data": {"text/plain": "array([0, 4, 9, 9, 3, 1, 4, 1, 5, 0, 4, 9, 4, 1, 5, 3, 3, 8, 5, 6, 9, 6,\n       0, 6, 9, 3, 2, 1, 8, 1, 7, 0, 4, 4, 1, 5, 3, 0, 5, 7, 3, 9, 6, 5,\n       5, 8, 8, 1, 1, 2, 4, 8, 5, 6, 9, 2, 1, 8, 5, 3, 2, 7, 9, 6, 3, 7,\n       4, 2, 0, 1, 0, 2, 7, 3, 5, 1, 8, 7, 7, 2, 0, 6, 6, 4, 6, 8, 3, 7,\n       4, 1, 9, 3, 5, 4, 0, 3, 1, 3, 3, 1, 2, 8, 5, 0, 1, 7, 2, 1, 3, 3,\n       7, 4, 0, 2, 9, 0, 4, 2, 5, 6, 1, 2, 6, 1, 8, 6, 0, 2, 6, 2, 6, 1,\n       9, 4, 8, 0, 4, 0, 2, 3, 4, 4, 1, 7, 4, 7, 2, 0, 3, 7, 8, 8, 7, 5,\n       4, 3, 5, 4, 9, 1, 3, 8, 8, 1, 1, 6, 7, 3, 3, 9, 9, 0, 6, 1, 0, 1,\n       0, 7, 6, 1, 5, 9, 0, 2, 2, 8, 6, 8, 3, 2, 9, 2, 9, 3, 0, 1, 2, 7,\n       4, 9, 9, 7, 9, 3, 2, 7, 2, 6, 9, 8, 0, 2, 6, 3, 4, 2, 7, 6, 6, 7,\n       7, 6, 0, 7, 6, 6, 0, 7, 1, 4, 4, 1, 0, 9, 4, 0, 4, 2, 4, 6, 5, 3,\n       8, 4, 1, 3, 9, 8, 3, 8, 9, 4, 2, 0, 4, 9, 2, 3, 5, 0, 8, 2, 5, 4,\n       7, 5, 5, 1, 0, 2, 9, 0, 7, 7, 6, 2, 1, 5, 4, 1, 0, 5, 1, 6, 5, 4,\n       8, 7, 5, 9, 0, 2, 2, 3, 4, 4, 8, 8, 2, 5, 3, 0, 7, 0, 3, 0, 7, 9,\n       8, 8, 3, 3, 9, 8, 2, 8, 4, 7, 7, 9, 1, 3, 5, 9, 8, 2, 2, 9, 4, 6,\n       8, 0, 6, 1, 2, 7, 8, 8, 9, 7, 9, 0, 3, 7, 2, 3, 0, 7, 3, 9, 9, 4,\n       2, 1, 7, 4, 4, 5, 7, 4, 7, 4, 4, 5, 2, 4, 2, 0, 6, 3, 6, 4, 2, 7,\n       2, 2, 3, 2, 5, 8, 1, 0, 6, 6, 1, 5, 6, 8, 6, 7, 0, 1, 1, 9, 7, 2,\n       7, 8, 2, 4, 8, 9, 8, 4, 4, 2, 5, 5, 5, 2, 6, 6, 9, 6, 9, 8, 2, 1,\n       2, 3, 3, 7, 5, 9, 6, 6, 0, 0, 4, 7, 7, 7, 8, 2, 5, 5, 5, 1, 4, 6,\n       0, 5, 9, 1, 3, 1, 2, 2, 1, 0])"}, "metadata": {}}], "execution_count": 35}, {"id": "c9c197bb-aa77-4e5b-937b-56b05d326ada", "cell_type": "code", "source": "wrong=[(p,e) for (p,e) in zip(predicated, expected) if p !=e]", "metadata": {"trusted": true}, "outputs": [], "execution_count": 36}, {"id": "0e9c1489-ef82-4311-a647-a50408925c0d", "cell_type": "code", "source": "wrong", "metadata": {"trusted": true}, "outputs": [{"execution_count": 37, "output_type": "execute_result", "data": {"text/plain": "[(5, 3),\n (8, 9),\n (4, 9),\n (7, 3),\n (7, 4),\n (2, 8),\n (9, 8),\n (3, 8),\n (3, 8),\n (1, 8)]"}, "metadata": {}}], "execution_count": 37}, {"id": "8699c54d-7596-4994-995f-f5be655c0f50", "cell_type": "code", "source": "440/450*100", "metadata": {"trusted": true}, "outputs": [{"execution_count": 38, "output_type": "execute_result", "data": {"text/plain": "97.77777777777777"}, "metadata": {}}], "execution_count": 38}, {"id": "c94097f5-adc4-4c1c-b059-009552be27ea", "cell_type": "code", "source": "print(f'{knn.score(X_test, y_test):.2%}')", "metadata": {"trusted": true}, "outputs": [{"name": "stdout", "text": "97.78%\n", "output_type": "stream"}], "execution_count": 39}, {"id": "b94a60d2-3f08-4947-a6de-518e3add76dc", "cell_type": "code", "source": "from sklearn.metrics import confusion_matrix", "metadata": {"trusted": true}, "outputs": [], "execution_count": 40}, {"id": "b42022c5-9e80-4272-a4f4-64282e4d5c4d", "cell_type": "code", "source": "confusion=confusion_matrix(y_true=expected, y_pred=predicated)", "metadata": {"trusted": true}, "outputs": [], "execution_count": 41}, {"id": "698582a3-ebb7-4f49-bb92-037f7ff1601d", "cell_type": "code", "source": "confusion", "metadata": {"trusted": true}, "outputs": [{"execution_count": 42, "output_type": "execute_result", "data": {"text/plain": "array([[45,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n       [ 0, 45,  0,  0,  0,  0,  0,  0,  0,  0],\n       [ 0,  0, 54,  0,  0,  0,  0,  0,  0,  0],\n       [ 0,  0,  0, 42,  0,  1,  0,  1,  0,  0],\n       [ 0,  0,  0,  0, 49,  0,  0,  1,  0,  0],\n       [ 0,  0,  0,  0,  0, 38,  0,  0,  0,  0],\n       [ 0,  0,  0,  0,  0,  0, 42,  0,  0,  0],\n       [ 0,  0,  0,  0,  0,  0,  0, 45,  0,  0],\n       [ 0,  1,  1,  2,  0,  0,  0,  0, 39,  1],\n       [ 0,  0,  0,  0,  1,  0,  0,  0,  1, 41]])"}, "metadata": {}}], "execution_count": 42}, {"id": "917bdea4-8cf7-4f1e-a172-d3ef5f21835d", "cell_type": "code", "source": "", "metadata": {"trusted": true}, "outputs": [], "execution_count": null}]}